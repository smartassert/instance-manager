name: Destroy Inactive Instances

on:
  workflow_dispatch:
    inputs:
      service_id:
        description: Service for which to create an instance
        required: true

jobs:
  assign:
    name: Destroy instances
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-read-env-file
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-read-env-file
          path: ./vendor/smartassert/bash-read-env-file
          ref: main

      - name: Read service configuration
        id: build-config
        env:
          ENV_FILE_PATH: ./services/${{ github.event.inputs.service_id }}/configuration.env
          SERVICE_ID: ${{ github.event.inputs.service_id }}
        run: |
          ./ci/scripts/check-service-configuration-exists.sh
          ./vendor/smartassert/bash-read-env-file/src/read-env-file-ga.sh

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet

      - name: Get floating IP
        id: ip
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
        run: echo "::set-output name=value::$(php bin/console app:ip:get)"

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Get list of instances to destroy
        id: instances
        if: ${{ steps.ip.outputs.value != '' }}
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
          INSTANCE_STATE_URL: ${{ steps.build-config.outputs.STATE_URL }}
          IP: ${{ steps.ip.outputs.value }}
          DEFAULT_INCLUDE_FILTER: ''
          DEFAULT_EXCLUDE_FILTER: '[{"ips":"{{ IP }}"}]'
          INCLUDE_FILTER: ${{ steps.build-config.outputs.DESTROY_INCLUDE_FILTER }}
          EXCLUDE_FILTER: ''
        run: |
          COMBINED_INCLUDE_FILTER=$(./vendor/smartassert/bash-ga-ci-tools/src/combine-json-scalar-objects.sh "$DEFAULT_INCLUDE_FILTER" "$INCLUDE_FILTER")
          INCLUDE_FILTER_EXIT_CODE="$?"
            if [ "0" != "$INCLUDE_FILTER_EXIT_CODE" ]; then
            echo "Invalid default include filter or include filter"
            echo "$COMBINED_INCLUDE_FILTER"
            exit 1
          fi

          COMBINED_EXCLUDE_FILTER=$(./vendor/smartassert/bash-ga-ci-tools/src/combine-json-scalar-objects.sh "$DEFAULT_EXCLUDE_FILTER" "$EXCLUDE_FILTER")
          EXCLUDE_FILTER_EXIT_CODE="$?"
            if [ "0" != "$EXCLUDE_FILTER_EXIT_CODE" ]; then
            echo "Invalid default exclude filter or exclude filter"
            echo "$COMBINED_EXCLUDE_FILTER"
            exit 1
          fi

          INSTANCES=$(
            INSTANCE_COLLECTION_TAG=$INSTANCE_COLLECTION_TAG php bin/console app:instance:list \
            --include="${COMBINED_INCLUDE_FILTER//"{{ IP }}"/$IP}" \
            --exclude="${COMBINED_EXCLUDE_FILTER//"{{ IP }}"/$IP}"
          )

          echo "::set-output name=value::$INSTANCES"

      - name: Destroy matching instances
        if: ${{ steps.instances.outputs.value != '' }}
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
          INSTANCES: ${{ steps.instances.outputs.value }}
        run: |
          INSTANCE_IDS=$(echo "$INSTANCES" | jq '.instances[] | .id' | sed ':a;N;$!ba;s/\n/ /g')

          echo "$INSTANCES" | jq "."
          echo "IDs: $INSTANCE_IDS"

          for ID in $INSTANCE_IDS; do
            echo "Destroying $ID ... "
            php bin/console app:instance:destroy --id="$ID"
          done
