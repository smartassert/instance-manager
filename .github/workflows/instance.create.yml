name: instance.create

on:
  workflow_dispatch:
    inputs:
      service_id:
        description: Service for which to create an instance
        required: true

jobs:
  create:
    name: Create instance for ${{ github.event.inputs.service_id }}
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Read service configuration
        id: build-config
        env:
          CONFIGURATION_PATH: ./services/${{ github.event.inputs.service_id }}/configuration.json
        run: |
          if [ ! -f "$CONFIGURATION_PATH" ]; then
            echo "Configuration for service ${{ github.event.inputs.service_id }} not found: $CONFIGURATION_PATH"
            exit 1
          fi

          ./vendor/smartassert/bash-ga-ci-tools/src/create-ga-outputs-from-json-scalar-object.sh < "$CONFIGURATION_PATH"

      - name: Read image id
        id: image_id
        env:
          CONFIGURATION_PATH: ./services/${{ github.event.inputs.service_id }}/image.json
        run: |
          if [ ! -f "$CONFIGURATION_PATH" ]; then
            echo "Image configuration for service ${{ github.event.inputs.service_id }} not found: $CONFIGURATION_PATH"
            exit 1
          fi

          ./vendor/smartassert/bash-ga-ci-tools/src/create-ga-outputs-from-json-scalar-object.sh < "$CONFIGURATION_PATH"

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Check snapshot exists
        env:
          IMAGE_ID: ${{ steps.image_id.outputs.image_id }}
          EXPECTED_EXISTS: "true"
        run: ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh

      - name: Set service token secret
        id: service_token_secret
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN_SELF }}
        run: |
          NAME="SERVICE_TOKEN_$(tr -dc A-Z0-9 </dev/urandom | head -c 16)"
          VALUE="$(tr -dc a-zA-Z0-9 </dev/urandom | head -c 32)"

          gh secret set "$NAME" -b"$VALUE"
          echo "::set-output name=name::$NAME"

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet

      - name: Create
        id: instance
        env:
          IMAGE_ID: ${{ steps.image_id.outputs.image_id }}
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
        run: |
          CREATE_OUTPUT=$(php bin/console app:instance:create)
          echo "::set-output name=id::$(echo "$CREATE_OUTPUT" | jq ".id")"

      - name: Health check
        if: ${{ steps.build-config.outputs.health_check_url != '' }}
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
          INSTANCE_HEALTH_CHECK_URL: ${{ steps.build-config.outputs.health_check_url }}
        run: |
          HEALTH_CHECK_OUTPUT=$(php bin/console app:instance:is-healthy --id=${{ steps.instance.outputs.id }})
          HEALTH_CHECK_EXIT_CODE="$?"
          JQ_OUTPUT=$(echo "$HEALTH_CHECK_OUTPUT" | jq "." 2>/dev/null)

          if [ "" == "$JQ_OUTPUT" ]; then
            echo "$HEALTH_CHECK_OUTPUT"
          else
            echo "$JQ_OUTPUT"
          fi

          exit $HEALTH_CHECK_EXIT_CODE

      - name: Remove instance if health check failed
        if:  ${{ failure() }}
        env:
          INSTANCE_ID: ${{ steps.instance.outputs.id }}
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
        run: php bin/console app:instance:destroy --id="$INSTANCE_ID"

      - name: Remove service token secret
        if: ${{ always() }}
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN_SELF }}
        run: |
          gh secret remove "${{ steps.service_token_secret.outputs.name }}"
