name: instance.create

on:
  workflow_dispatch:
    inputs:
      service_id:
        description: Service for which to create an instance
        required: true

jobs:
  create:
    name: Create instance for ${{ github.event.inputs.service_id }}
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

    steps:
      - name: Experimental secret access
        run:
          echo "TEST_001 literal access"
          echo "${{ secrets.TEST_001 }}"

          echo "TEST_002 literal access"
          echo "${{ secrets.TEST_002 }}"

          echo "TEST_OO1 indirect access 1"
          echo "${{ secrets['TEST_001'] }}"

          echo "TEST_OO1 indirect access 2"
          name="TEST_001"
          echo "${{ secrets[$name] }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Read service configuration
        id: build-config
        env:
          CONFIGURATION_PATH: ./services/${{ github.event.inputs.service_id }}/configuration.json
        run: |
          if [ ! -f "$CONFIGURATION_PATH" ]; then
            echo "Configuration for service ${{ github.event.inputs.service_id }} not found: $CONFIGURATION_PATH"
            exit 1
          fi

          ./vendor/smartassert/bash-ga-ci-tools/src/create-ga-outputs-from-json-scalar-object.sh < "$CONFIGURATION_PATH"

      - name: Read image id
        id: image_id
        env:
          CONFIGURATION_PATH: ./services/${{ github.event.inputs.service_id }}/image.json
        run: |
          if [ ! -f "$CONFIGURATION_PATH" ]; then
            echo "Image configuration for service ${{ github.event.inputs.service_id }} not found: $CONFIGURATION_PATH"
            exit 1
          fi

          ./vendor/smartassert/bash-ga-ci-tools/src/create-ga-outputs-from-json-scalar-object.sh < "$CONFIGURATION_PATH"

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Check snapshot exists
        env:
          IMAGE_ID: ${{ steps.image_id.outputs.image_id }}
          EXPECTED_EXISTS: "true"
        run: ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet

      - name: Create
        id: instance
        env:
          ENV_SOURCE_PATH: ./services/${{ github.event.inputs.service_id }}/env.json
        run: |
          ENV_VAR_OPTIONS=""
          if [ -f "$ENV_SOURCE_PATH" ]; then
            ENV_VAR_OPTIONS=$(./vendor/smartassert/bash-ga-ci-tools/src/output-json-scalar-object.sh "--env-var='{{ key }}={{ value }}' " < "$ENV_SOURCE_PATH")
          fi

          COMMAND="php bin/console app:instance:create \
            $ENV_VAR_OPTIONS \
            --first-boot-script='[[ -f ./first-boot.sh ]] && chmod +x ./first-boot.sh &&./first-boot.sh' \
            --collection-tag='${{ github.event.inputs.service_id }}' \
            --image-id='${{ steps.image_id.outputs.image_id }}'"

          CREATE_OUTPUT=$(eval "$COMMAND")
          echo "::set-output name=id::$(echo "$CREATE_OUTPUT" | jq ".id")"

      - name: Health check
        if: ${{ steps.build-config.outputs.health_check_url != '' }}
        env:
          INSTANCE_HEALTH_CHECK_URL: ${{ steps.build-config.outputs.health_check_url }}
        run: php bin/console app:instance:is-healthy --id=${{ steps.instance.outputs.id }}

      - name: Readiness check
        env:
          INSTANCE_STATE_URL: ${{ steps.build-config.outputs.state_url }}
        run: php bin/console app:instance:is-ready --id=${{ steps.instance.outputs.id }}

      - name: Remove instance on failure
        if: ${{ failure() }}
        run: php bin/console app:instance:destroy --id="${{ steps.instance.outputs.id }}"
